I"<h3 id="woodpecker-provides-a-communication-channel-between-mac-client-and-app-and-defines-a-friendly-api-for-developer-so-we-can-custom-a-plugin-tool-very-easily">Woodpecker provides a communication channel between mac client and app, and defines a friendly Api for developer, so we can custom a plugin tool very easily.</h3>

<h2 id="create-a-plugin">Create a plugin:</h2>

<ol>
  <li>
    <p>Create a service, and implements it’s action list.</p>
  </li>
  <li>
    <p>Register the service.</p>
  </li>
  <li>
    <p>Use the service at mac client.</p>
  </li>
</ol>

<p>Now We’ll implement a service called “EchoService” to show these processes in detail.</p>

<ul>
  <li><a href="https://github.com/appwoodpecker/woodpecker-ios">Demo Code</a></li>
</ul>

<h3 id="1-create-a-service">1. Create a service</h3>

<p>ADHService class represent a service in woodpecker, so we create a subclass of ADHService named “EchoService”.</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>@interface EchoService : ADHService

@end

</code></pre></div></div>

<p>A service has a name, and has a list of action.
here we named it “adh.EchoService”, and define an action named “echo”.</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>@implementation EchoService

+ (NSString *)serviceName
{
    return @"adh.EchoService";
}

+ (NSDictionary *)&lt;NSString *,NSString *&gt;actionList
{
    return @{
            	@"echo" : @selector(onRequestEcho:), 
            };
}

/*
this handler will be called on receiving a request whose service named "adh.EchoService", action named "echo". 
request parameter could carry a dictionary body and a binary payload.
and you must call [request finish] or other finsh method to response the request.
*/
- (void)onRequestEcho: (ADHRequest *)request
{
    NSDictioanry * body = request.body;
    NSData * payload = request.payload;
    /**
        your code
    */
    [request finish];
}

@end
</code></pre></div></div>

<h3 id="2-register-service">2. Register service</h3>

<p>before use EchoService, you should register it.</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>- (void)viewDidLoad {
    [super viewDidLoad];

    [[ADHOrganizer organizer] registerService:[EchoService service]];
}
</code></pre></div></div>

<h3 id="3-use-service-at-mac-client">3. Use service at mac client</h3>

<p>There are two way to use a service:</p>

<ol>
  <li>
    <p>Call service using the mac client’s api tool</p>
  </li>
  <li>
    <p>Create a mac web plugin, and call the service in the wap page, the web plugin will appear at the toolbar</p>
  </li>
</ol>

<p>I’ll show you in detail.</p>

<h4 id="31-using-the-mac-clients-api-tool-click-menu-at-plugin---tool">3.1 Using the mac client’s Api tool, click menu at Plugin -&gt; Tool</h4>

<p><img src="/assets/img/io1.png" alt="io1" /></p>

<p>There are four form you should provide:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Service: which service you want call, here we choose "adh.EchoService".

Action: which action you want call, here we choose "echo".

Body: you can pass a dictionary object(here the dictionary should be a json text) to the request, and you you could fetch it using request.body later, here we fill nothing.

Payload: you can pass a data payload(here should be a file) to the request, and you could fetch it using request.payload later, here we choose nothing.
</code></pre></div></div>

<h4 id="32-create-a-mac-web-client-plugin">3.2 Create a mac web client plugin</h4>

<p>A web plugin is a bundle stored at the Plugin directory (could be find at the Plugin -&gt; Home menu). 
A plugin bundle should at least has two files:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>index.html （the plugin's index page)
icon.png (the icon will show at tool bar)
</code></pre></div></div>

<p>in the web page you could call App’s service using the method “adhCallClientApi” (defined in Plugin/adh.bundle/adh.js).</p>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">&lt;!-- in html --&gt;</span>
<span class="nt">&lt;head&gt;</span>
  <span class="nt">&lt;script </span><span class="na">type=</span><span class="s">"text/javascript"</span> <span class="na">src=</span><span class="s">"../adh.bundle/adhjs.js"</span><span class="nt">&gt;&lt;/script&gt;</span>
<span class="nt">&lt;/head&gt;</span>

<span class="nt">&lt;body&gt;</span>
  <span class="nt">&lt;script </span><span class="na">type=</span><span class="s">"text/javascript"</span><span class="nt">&gt;</span>
    <span class="kd">function</span> <span class="nx">callService</span><span class="p">(){</span>
      <span class="c1">//call Echoservice</span>
      <span class="nx">adhCallClientApi</span><span class="p">(</span><span class="dl">'</span><span class="s1">adh.EchoService</span><span class="dl">'</span><span class="p">,</span><span class="dl">'</span><span class="s1">echo</span><span class="dl">'</span><span class="p">,</span><span class="dl">''</span><span class="p">,</span><span class="dl">''</span><span class="p">,</span><span class="kd">function</span> <span class="p">(</span><span class="nx">data</span><span class="p">,</span><span class="nx">payload</span><span class="p">){</span>
			
      <span class="p">});</span>
    <span class="p">}</span>
  <span class="nt">&lt;/script&gt;</span>
<span class="nt">&lt;/body&gt;</span>
</code></pre></div></div>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">//in adh.bundle/adh.js</span>

<span class="cm">/**
call app action of the service

@p service: service name
@p action: action name
@p data: object that could be jsonfy
@p payload: binary data

on response the callback function will be called, the callback could contains a object and a payload depends on your service implentation
*/</span>

<span class="kd">function</span> <span class="nx">adhCallClientApi</span><span class="p">(</span><span class="nx">service</span><span class="p">,</span><span class="nx">action</span><span class="p">,</span><span class="nx">data</span><span class="p">,</span><span class="nx">payload</span><span class="p">,</span><span class="nx">callback</span><span class="p">)</span>
<span class="p">{</span>
	
<span class="p">}</span>

</code></pre></div></div>
<p>Once you finish your web plugin, you could refresh the plugin list using “Plugin -&gt; Reload” menu, your plugin will show in the tool bar.</p>

:ET